%META:TOPICINFO{author="klie" comment="" date="1560347277" format="1.1" reprev="5" version="5"}%
%META:TOPICPARENT{name="ComputeCluster"}%
<!--
   * ALLOWTOPICCHANGE = System-Admin
-->

---+!! Slurm Compute Cluster FAQ

%TOC%

---++ What's the status of my jobs?

---++ Why is my job pending?
   * squeue reasons
   * specify few resources in sbatch: time, cpu, memory

---++ How much !FairShare do I have left?
Run =sshare= and check the rightmost column.

---++ How do I kill a compute job?

To cancel a job, use =scancel=. You need the running or pending jobid. It is only the job's owner and SLURM administrators that can cancel jobs.

<verbatim>
$ scancel <jobid>
</verbatim>

To cancel all your jobs (running and pending) you can run

<verbatim>
$ scancel -u <username>
</verbatim>

You get the job id when you submit the job and you can look it up by =squeue -u <username>=. Interactive jobs are cancelled once you close the session, e.g. via =Ctrl + C=.

<blockquote>
Do not kill/skill =srun= to cancel a SLURM job! This will only remove it from the eyes of slurm while continuing to run.
</blockquote>

---++ How to debug an experiment?

If you want to have an interactive shell on a slurm node, then on *wormulon*, you can run

<verbatim>
srun --pty bash
</verbatim>

=srun= accepts the same parameters as you can specify in a batch file, e.g. =srun --gres=gpu:1 --pty bash= would request one GPU.

---++ Which nodes are there in the cluster?

*TODO*

---++ Where to put code and data?

See [[ComputeClusterStorage]].

---++ How to use GPUs?
When submitting a job via =sbatch= or while debugging with =srun=, you need to specify resource requirements. For example, use =--gres=gpu:p100:2= to request two P100 GPUs. For details, refer to [[https://slurm.schedmd.com/sbatch.html][the sbatch documentation]].


<div style="background: red; color: #F8F8F8; border: solid 2px darkred; padding: 5px">
TODO provide a list of the GPUs / nodes we have available
</div>

---++ How do I get a certain version of CUDA?

In your batch script, use =module load cuda= for the newest version or =module load cuda/$version= . Currently installed are

<verbatim>
cuda/10.0          cuda/8.0           cuda/9.0           cuda/9.2
cuda/10.1(default) cuda/8.0-ga2       cuda/9.1
</verbatim>

---++ How can I create a virtualenv?

Use the =venv= module that comes with Python, e.g. 

<verbatim>
python3.6 -m venv venv
</verbatim>

Replace =python3.6= with the Python version of your choice. 

In your batch file, you can activate it by referencing its abosulte path, e.g. =source /ukp-storage-1/$your_name/test/venv/bin/activate=

---++ How can I use Python 3.7?

Use [[https://docs.conda.io/en/latest/miniconda.html][miniconda]] .

---++ How do I run jobs that run longer than three days?

*TODO*

---++ Which software is available on each node?

%TWISTY{ 
    showlink="Installed software" 
    hidelink="Hide _Installed software_" 
    showimgleft="%ICONURLPATH{toggleopen-small}%" 
    hideimgleft="%ICONURLPATH{toggleclose-small}%" 
}% 
%TWISTY{ 
    showlink="System programs" 
    hidelink="Hide _System programs_" 
    showimgleft="%ICONURLPATH{toggleopen-small}%" 
    hideimgleft="%ICONURLPATH{toggleclose-small}%" 
}% 
   * wget
   * gcc
   * g++
   * curl
   * htop
   * iotop
   * ncdu
   * atop
   * screen
   * nano
   * vim
%ENDTWISTY% 

%TWISTY{ 
    showlink="developer software" 
    hidelink="Hide _developer software_" 
    showimgleft="%ICONURLPATH{toggleopen-small}%" 
    hideimgleft="%ICONURLPATH{toggleclose-small}%" 
}% 
   * gcc
   * gcc-c++
   * python3.6
   * python2
%ENDTWISTY% 

%ENDTWISTY% 
