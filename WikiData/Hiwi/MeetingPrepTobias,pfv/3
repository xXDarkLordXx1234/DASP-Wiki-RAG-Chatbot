%META:TOPICINFO{author="SilvanaHartmann" date="1317395947" format="1.1" reprev="3" version="3"}%
%META:TOPICPARENT{name="TobiasHorsmann"}%
---+++ Meeting 28.09.2011

   * Lucene !IndexTermAnnotator.PARAM_CHANGE_TO_LOWERCASE (default "true")
   * !RegexPatterns (bold/italic)
   * Candidate extraction pipeline
   * Frequency extraction from Wikipedia Text
      * Use the [[http://code.google.com/p/dkpro-core-asl/source/browse/de.tudarmstadt.ukp.dkpro.core-asl/trunk/de.tudarmstadt.ukp.dkpro.core.io.web1t/src/main/java/de/tudarmstadt/ukp/dkpro/core/io/web1t/Web1FormatWriter.java][Web1TFormatWriter]] to create a pipeline that extracts n-gram frequencies from Wikipedia Text
         * (E.g., !WikipediaReader, Tokenizer (!BreakIteratorSegmenter), !Web1TFormatWriter)
         * The !Web1TFormatWriter takes _token_ and _sentence_ annotations, creates n-grams according to the parameters and collects counts for the n-gram
         * Then the counts are stored in !Web1T-format (one n-gram and its frequency per line separated by tab)
   * Get acquainted with !UimaFit external resource binding (for uima-fit aware components): [[http://code.google.com/p/uimafit/wiki/uimaFitResources][uimafit wiki]]
   * Create an annotator that uses a [[http://code.google.com/p/dkpro-core-asl/source/browse/de.tudarmstadt.ukp.dkpro.core-asl/trunk/de.tudarmstadt.ukp.dkpro.core.api.frequency/src/main/java/de/tudarmstadt/ukp/dkpro/core/api/frequency/provider/FrequencyCountProvider.java][FrequencyCountProvider]] as external resource.
      * the provider could, for instance be a [[http://code.google.com/p/dkpro-core-asl/source/browse/de.tudarmstadt.ukp.dkpro.core-asl/trunk/de.tudarmstadt.ukp.dkpro.core.frequency-asl/src/main/java/de/tudarmstadt/ukp/dkpro/core/frequency/Web1TFrequencyCountProvider.java][Web1TFrequencyCountProvider]] (providing access to !Web1T-data just generated)
      * "dummy application": compute maximum likelihood estimate (MLER) of the tokens in the document (f(token)/total-words-in-corpus), annotate as "MLE"-type ("mleAnnotator") 
      * "dummy pipeline": Read Text, tokenize, use mleAnnotator, dump
   1 %ICON{new}% Generalize the "mleAnnotator" such that a "FeaturePath" is used as a parameter to determine for which annotations (or their features!) frequency counts should be extracted and processed
      * Example: A feature path is also used in the !IndexTermAnnotator.PARAM_PATHS. We set it to !WikiMwe.class.getName()+"/linkTarget" to annotate the linkTarget-values as IndexTerms, or to" WikiMwe.class.getName() to annotate the spans annotated as MWE as "IndexTerms. (You can also have a look at the sourcecode/documentation of the !IndexTermAnnotator)
      * Goal: More flexible annotator. By specifying a feature or feature-path we can decide, whether we want to collect statistics on tokens, or lemmas, or sth. else.
      * Info: !DKPro-asl [[http://code.google.com/p/dkpro-core-asl/source/browse/de.tudarmstadt.ukp.dkpro.core-asl/trunk#trunk%2Fde.tudarmstadt.ukp.dkpro.core.api.featurepath][FeaturePath-package]]
      * Info: Iterating-over/Selecting Annotations with [[http://code.google.com/p/uimafit/source/browse/trunk/uimaFIT/src/main/java/org/uimafit/util/JCasUtil.java][UimaFit]]
   2 %ICON{new}% Add another feature path to the "mleAnnotator" which allows to specifiy as which type or type.feature the computed values are stored (we may wish to store the value in a specific type or a feature of the WikiMwe type, or something else..)
   3  %ICON{new}% Create a version of the !Web1TFormatWriter that extracts n-grams on other annotations than token by using a FeaturePath. We, for instance, would like to  extract the n-grams for the lemmas associated with the tokens.


-- Main.SilvanaHartmann - 2011-09-28