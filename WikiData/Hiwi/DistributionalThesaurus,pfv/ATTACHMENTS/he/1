#!/usr/bin/perl -w
use strict;

# hadoop execution shortcut script
# Richard Steuer, Do Mai 19.05.2011 um 13:13 Uhr

# argument count
unless ( ( $#ARGV + 1 ) == 2 || ( $#ARGV + 1 ) == 3 ) {

    die "\nNot enough arguments!\n\n\t\tUsage: $0 <file>.java <input dir> (<output dir>)\n\n";

}

# required
my ($javafile, $inputdir) = ($ARGV[0], $ARGV[1]);

my $outputdir;

# optional
if( $#ARGV+1 == 3 ) {

    $outputdir = $ARGV[2];

} else {

    # use custom name
    $outputdir = $inputdir . "-out";

}

###############################################################
############################### configuration #################
###############################################################

my $javabasedir  = "~/src/";
my $executiondir = "classes_own/";
my $classdirname = $javafile . "_classes";
my $HADOOP_HOME  = "/usr/lib/hadoop-0.20";
my $HADOOP_CLASSPATH = "/home/local/UKP/steuer/lib";
my $classname    = $javafile; $classname =~ s/\.java$//;
my $packagename  = "mapreduce";

###############################################################
############################# execution steps #################
###############################################################

# cd
print "chdir $executiondir ...\n";
chdir($executiondir) or die "Fehler: $!";

# mkdir for java classes
print "mkdir $classdirname ...\n";
mkdir($classdirname, 0777);

# execute javac
print "Execute javac ...\n";
      system "javac -encoding UTF-8 -cp $HADOOP_HOME/hadoop-0.20.2-cdh3u3-SNAPSHOT-core.jar:$HADOOP_CLASSPATH/* -d $classdirname $javabasedir$javafile";

# create jar
print "Create jar ...\n";
system "jar -cvf ~/jars/" . $classname . ".jar -C $classdirname .";

# remove output directory
system "$HADOOP_HOME/bin/hadoop dfs -rmr $outputdir";

# run the application
print "Run the application: $HADOOP_HOME/bin/hadoop jar $HADOOP_HOME/$classname.jar $packagename.$classname $inputdir $outputdir\n";
system "$HADOOP_HOME/bin/hadoop jar ~/jars/" . $classname . ".jar $packagename.$classname $inputdir $outputdir";
